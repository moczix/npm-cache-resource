#!/usr/bin/env bash
set -eo pipefail

# functions from the git resource for configuring git and ssh
source /opt/resource/git/common.sh

DEST_DIR="$1"

GIT_DEST_DIR="$(mktemp -d -t git-resource-destination.XXXXXX)"

# pull the git repo from the config passed in stdin
# also handles emitting the correct output for concourse
/opt/resource/git/in "$GIT_DEST_DIR"

# the config passed via stdin is saved to /tmp/git-resource-request.*
# by the /opt/resource/git/in script. load it back into PAYLOAD 
# to parse it further
PAYLOAD=$(echo /tmp/git-resource-request.*)

# use git-resource's helper functions to configure git credentials
load_pubkey $PAYLOAD
configure_git_ssl_verification $PAYLOAD
configure_credentials $PAYLOAD

TRACE=$(jq -r '.source["trace"] // "false"' < $PAYLOAD)

# Configuration to access a NPM Registry or Private Registry by User and Password.
REGISTRY_URL=$(jq -r '.source["registry-url"] // ""' < $PAYLOAD)
REGISTRY_USER=$(jq -r '.source["registry-user"] // ""' < $PAYLOAD)
REGISTRY_PASS=$(jq -r '.source["registry-pass"] // ""' < $PAYLOAD)
REGISTRY_MAIL=$(jq -r '.source["registry-email"] // ""' < $PAYLOAD)
REGISTRY_SCOPE=$(jq -r '.source["registry-scope"] // ""' < $PAYLOAD)

# Configuration to access a Private Registry by Base64 Token
REGISTRY=$(jq -r '.source.registry // ""' < $PAYLOAD)
TOKEN=$(jq -r '.source.token // ""' < $PAYLOAD)

# Node.js Environment variables
NODE_ENV=$(jq -r '.source["node-env"] // "development"' < $PAYLOAD)

# Configuration for projects living in subdirectories
PROJECT_PATH=$(jq -r '.source["project-path"] // ""' < $PAYLOAD)

# Configuration use for npm and npm ci command
NPM_CI_ARGS=$(jq -r '.source["npm-args"] // "-q"' < $PAYLOAD)

# Configuration use npm ci command
NPM_CI_SUPPORT=$(jq -r '.source["npm-ci-support"] // false' < $PAYLOAD)

# Configuration use yarn cli
YARN_SUPPORT=$(jq -r '.source["yarn-support"] // false' < $PAYLOAD)
YARN_CI_ARGS=$(jq -r '.source["yarn-args"] // ""' < $PAYLOAD)

# Configuration use bower cli
BOWER_SUPPORT=$(jq -r '.source["bower-support"] // false' < $PAYLOAD)
BOWER_ARGS=$(jq -r '.source["bower-args"] // "-q --allow-root"' < $PAYLOAD)

# go into the cloned sorce code
cd "$GIT_DEST_DIR/$PROJECT_PATH"

if [ "$TRACE" == "true" ]; then
    set -x
else
    set +x
fi

# configure proxy
if [ -n "$http_proxy" ]; then
    npm config set proxy $http_proxy
    npm config set https-proxy $https_proxy
fi

# login to registry
if [ -n "$REGISTRY_USER" ] && [ -n "$REGISTRY_PASS" ] && [ -n "$REGISTRY_MAIL" ]; then
    if [ -n "$REGISTRY_URL" ] && [ -n "$REGISTRY_SCOPE" ]; then
        npm-cli-login -u $REGISTRY_USER -p $REGISTRY_PASS -e $REGISTRY_MAIL -r $REGISTRY_URL -s $REGISTRY_SCOPE
    elif [ -n "$REGISTRY_URL" ]; then
        npm-cli-login -u $REGISTRY_USER -p $REGISTRY_PASS -e $REGISTRY_MAIL -r $REGISTRY_URL
    else
        npm-cli-login -u $REGISTRY_USER -p $REGISTRY_PASS -e $REGISTRY_MAIL
    fi
else
    if [ -n "$TOKEN" ]; then
        echo "always-auth=true" >> ~/.npmrc
        echo "_auth="$TOKEN"" >> ~/.npmrc
    fi
    if [ -n "$REGISTRY" ]; then
        npm config set registry $REGISTRY
    fi
fi

# use yarn, npm ci, npm install or bower to pull down packages
if [ "$YARN_SUPPORT" != "false" ]; then
    NODE_ENV=$NODE_ENV && yarn install $YARN_CI_ARGS >&2
elif [ "$NPM_CI_SUPPORT" != "false" ]; then
    NODE_ENV=$NODE_ENV && npm ci $NPM_CI_ARGS >&2
else
    NODE_ENV=$NODE_ENV && npm i $NPM_CI_ARGS >&2
fi

if [ "$BOWER_SUPPORT" != "false" ]; then
    bower install $BOWER_ARGS
    mv bower_components "$DEST_DIR/"
fi

# only export the node_modules folder
# the fetched version is already emitted by the git in script called at the beginning
mv node_modules "$DEST_DIR/"
